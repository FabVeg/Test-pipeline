
parameters:
  - name: packaging
    type: string
    values:
      - library
      - docker
  - name: artifactsFeeds
    type: string
    default: 'DIN-SSDE'
  - name: containerRegistry
    type: string
    default: ''
  - name: imageName
    type: string
    default: ''

jobs:
  - job: 'JarDeploy'
    variables:
    - name: isRelease
      value: $[eq(variables['Build.SourceBranch'], 'refs/heads/release')]
    steps:
      - checkout: self
        persistCredentials: true
        clean: true
      - template: mavenCache.yml
      - template: mavenAuthenticate.yml
        parameters:
          artifactsFeeds: ${{parameters.artifactsFeeds}}
      - script: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          MAJOR_MINOR_VERSION=$(echo "$CURRENT_VERSION" | cut -f1 -d- )
          echo "MAJOR_MINOR_VERSION=$MAJOR_MINOR_VERSION"
          git fetch --tags
          TAGS=$(git tag -l | grep -E "^${MAJOR_MINOR_VERSION}\\.[0-9]+\$" || echo "");
          echo "TAGS=$TAGS"
          if [[ -z "$TAGS" ]] ; then
            NEW_PATCH_DIGIT=0
          else
            PREVIOUS_PATCH_DIGITS=$(echo $TAGS | tr " " "\n" | cut -f3 -d.)
            echo "PREVIOUS_PATCH_DIGITS=$PREVIOUS_PATCH_DIGITS"
            PADDED_PREVIOUS_PATCH_DIGITS=""
            for v in $PREVIOUS_PATCH_DIGITS ; do 
              PADDED_PREVIOUS_PATCH_DIGITS="${PADDED_PREVIOUS_PATCH_DIGITS}$(printf '%06d,' $v)"
            done
            echo "PADDED_PREVIOUS_PATCH_DIGITS=$PADDED_PREVIOUS_PATCH_DIGITS"
            PREVIOUS_PATCH_DIGIT="$(echo $PADDED_PREVIOUS_PATCH_DIGITS | tr "," "\n" | sort -r | head -n1)";
            echo "PREVIOUS_PATCH_DIGIT=$PREVIOUS_PATCH_DIGIT"
            NEW_PATCH_DIGIT=$((1 + 10#$PREVIOUS_PATCH_DIGIT))
          fi
          NEXT_VERSION="${MAJOR_MINOR_VERSION}.${NEW_PATCH_DIGIT}"
          mvn $(mavenOpts) versions:set -DnewVersion=$NEXT_VERSION
          echo "##vso[task.setvariable variable=newVersion;isOutput=true]$NEXT_VERSION"
          rm pom.xml.versionsBackup
        name: VersionPrepare
        condition: eq(variables.isRelease, 'true')
      - task: Maven@3
        name: MavenDeploy
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'deploy'
          options: '-B'
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
      - script: |
          git config --global user.name "roomba"
          git config --global user.email roomba@example.com
          NEXT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "NEXT_VERSION=$NEXT_VERSION"
          git add pom.xml
          git commit -m "Delivery of version $NEXT_VERSION"
          git tag $NEXT_VERSION
          git push origin $NEXT_VERSION
        name: TagVersion
        condition: eq(variables.isRelease, 'true')
  - job: 'ImageDeploy'
    variables:
    - name: isRelease
      value: $[eq(variables['Build.SourceBranch'], 'refs/heads/release')]
    - name: newVersion
      value: $[dependencies.JarDeploy.outputs['VersionPrepare.newVersion']]
    dependsOn: JarDeploy
    condition: and(succeeded(), eq('${{parameters.packaging}}', 'docker'))
    steps:
      - script: |
          [[ ! -z "${{ parameters.containerRegistry }}" && ! -z "${{ parameters.imageName }}" ]]
        name: CheckParameters
      - template: mavenCache.yml
      - script: |
          echo "##vso[task.setvariable variable=newVersion;isOutput=false]latest"
        condition: eq(variables.newVersion, '')
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'package'
          options: '-B -DskipTests -Dmaven.javadoc.skip=true'
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
      - script: echo $(newVersion)
      - task: Docker@2
        inputs:
          containerRegistry: ${{ parameters.containerRegistry }}
          repository: ${{ parameters.imageName }}
          command: 'buildAndPush'
          Dockerfile: 'Dockerfile'
          tags: $(newVersion)
